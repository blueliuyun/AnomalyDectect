# -*- coding: utf-8 -*-
"""
Created on Mon Nov 19 15:02:11 2018

Reference : https://stackoverflow.com/questions/22583391/peak-signal-detection-in-realtime-timeseries-data/43512887#43512887
# Implementation of algorithm from https://stackoverflow.com/a/22640362/6029703

@author: tianye
"""
import numpy as np
import pylab

def thresholding_algo(y, lag, threshold, influence):
    nFlag = 0x00
    signals = np.zeros(len(y)) # 返回长度为 len(y) 的数组。
    filteredY = np.array(y)
    avgFilter = [0]*len(y)
    stdFilter = [0]*len(y)
    avgFilter[lag - 1] = np.mean(y[0:lag])
    stdFilter[lag - 1] = np.std(y[0:lag], ddof=1) # 计算全局标准差，默认情况下，numpy 计算的是总体标准偏差，ddof = 0
    for i in range(lag, len(y)):
        if abs(y[i] - avgFilter[i-1]) > threshold * stdFilter [i-1]:
            if y[i] > avgFilter[i-1]:                
                signals[i] = 1
                if nFlag == 0x00:
                    nFlag = i
                    print('nFlag = %d,  y[i] = %d' % (nFlag, y[i]))
            else:
                signals[i] = -1
                if nFlag == 0x00:
                    nFlag = i
                    print('nFlag = %d,  y[i] = %d' % (nFlag, y[i]))

            """
            @2018-11-20 对异常点的数值进行平滑，以便评估下下个点是否为异常点。
             因为不做平滑，由于当前是个异常点，对平均值、方差影响较大，若是下一个点仍是异常点，可能不会识别。
            """
            filteredY[i] = influence * y[i] + (1 - influence) * filteredY[i-1]
            avgFilter[i] = np.mean(filteredY[(i-lag+1):i+1])
            stdFilter[i] = np.std(filteredY[(i-lag+1):i+1], ddof=1)
        else:
            signals[i] = 0
            filteredY[i] = y[i]
            avgFilter[i] = np.mean(filteredY[(i-lag+1):i+1])
            stdFilter[i] = np.std(filteredY[(i-lag+1):i+1], ddof=1)

    return dict(signals = np.asarray(signals),
                avgFilter = np.asarray(avgFilter),
                stdFilter = np.asarray(stdFilter))
    
# Data
"""
y = np.array([1,1,1.1,1,0.9,1,1,1.1,1,0.9,1,1.1,1,1,0.9,1,1,1.1,1,1,1,1,1.1,0.9,1,1.1,1,1,0.9,
       1,1.1,1,1,1.1,1,0.8,0.9,1,1.2,0.9,1,1,1.1,1.2,1,1.5,1,3,2,5,3,2,1,1,1,0.9,1,1,3,
       2.6,4,3,3.2,2,1,1,0.8,4,4,2,2.5,1,1,1])
"""
y = np.array([2, 2, 3, 3, 3, 2, 3, 2, 3, 3, 2, 2, 3, 2, 2, 3, 2, 2, 2, 2, 3, 3, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 0, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, -3, -11, -18, -27, -35, -43, -53, -62, -70, -78, -87, -97, -106, -114, -122, -130, -139, -147, -154, -161, -168, -175, -182, -189, -195, -201, -206, -210, -216, -220, -224, -227, -230, -232, -235, -236, -237, -238, -238, -239, -238, -237, -236, -233, -230, -228, -225, -221, -216, -212, -207, -202, -195, -189, -183, -176, -168, -160, -153, -145, -137, -127, -118, -109, -100, -91, -80, -70, -61, -53, -42, -30, -21, -12, -1, 8, 17, 27, 36, 45, 53, 63, 71, 79, 89, 97, 104, 111, 118, 124, 130, 136, 141, 146, 152, 156, 159, 163, 165, 168, 169, 171, 171, 172, 172, 172, 170, 169, 168, 165, 163, 160, 155, 151, 147, 143, 137, 131, 125, 119, 113, 105, 98, 91, 84, 75, 66, 58, 49, 41, 30, 21, 13, 4, -5, -15, -23, -32, -41, -52, -61, -69, -77, -86, -96, -104, -111, -118, -126, -134, -140, -146, -153, -160, -166, -170, -176, -180, -184, -187, -190, -193, -196, -198, -198, -200, -200, -200, -200, -199, -198, -195, -192, -188, -186, -181, -176, -171, -166, -160, -152, -145, -138, -130, -122, -113, -104, -95, -86, -76, -66, -56, -46, -37, -24, -14, -3, 7, 17, 28, 38, 47, 58, 68, 78, 88, 96, 106, 115, 123, 130, 138, 146, 152, 159, 164, 170, 175, 179, 183, 186, 190, 191, 193, 195, 195, 194, 194, 193, 192, 190, 187, 183, 179, 175, 171, 165, 159, 154, 146, 139, 131, 124, 116, 107, 98, 90, 81, 71, 60, 50, 41, 31, 19, 8, -1, -10, -21, -31, -42, -52, -61, -71, -81, -91, -99, -107, -116, -125, -131, -138, -145, -152, -157, -162, -167, -172, -176, -179, -182, -184, -186, -187, -188, -187, -187, -187, -184, -183, -180, -176, -173, -170, -165, -160, -154, -148, -143, -137, -129, -121, -114, -106, -98, -88, -80, -71, -62, -52, -42, -33, -24, -14, -2, 7, 15, 24, 36, 45, 55, 64, 73, 84, 93, 101, 109, 118, 126, 134, 140, 147, 154, 161, 166, 172, 176, 182, 186, 189, 192, 196, 198, 199, 201, 202, 201, 202, 201, 200, 198, 196, 193, 191, 186, 183, 178, 173, 168, 162, 155, 149, 143, 135, 126, 119, 111, 103, 94, 84, 76, 67, 58, 47, 37, 27, 18, 8, -1, -11, -20, -30, -39, -50, -59, -68, -76, -87, -95, -103, -110, -118, -126, -132, -139, -145, -152, -157, -161, -165, -169, -174, -176, -179, -181, -183, -183, -184, -185, -184, -183, -182, -180, -178, -175, -171, -168, -164, -160, -154, -149, -144, -138, -130, -123, -116, -108, -102, -92, -84, -76, -68, -58, -48, -38, -30, -21, -10, 0, 9, 17, 27, 37, 46, 55, 64, 74, 84, 92, 99, 108, 117, 125, 132, 139, 147, 154, 160, 165, 171, 176, 181, 185, 189, 191, 194, 197, 199, 202, 202, 203, 203, 203, 201, 200, 198, 197, 194, 191, 187, 183, 180, 174, 168, 162, 157, 151, 144, 136, 129, 122, 114, 105, 96, 88, 80, 70, 60, 51, 42, 32, 22, 12, 3, -6, -15, -25, -35, -44, -53, -62, -71, -80, -87, -96, -105, -113, -119, -126, -133, -139, -145, -151, -156, -161, -166, -170, -173, -176, -179, -182, -183, -184, -185, -185, -185, -184, -183, -181, -179, -176, -174, -169, -166, -161, -157, -152, -146, -140, -135, -128, -120, -113, -105, -98, -90, -81, -71, -63, -55, -46, -36, -26, -17, -8, 1, 12, 21, 29, 39, 49, 58, 67, 76, 85, 94, 102, 110, 117, 127, 134, 140, 147, 154, 160, 166, 170, 176, 180, 185, 188, 191, 194, 197, 199, 200, 201, 202, 202, 202, 201, 200, 198, 195, 193, 190, 187, 182, 178, 173, 168, 162, 157, 151, 144, 136, 129, 121, 113, 106, 96, 87, 79, 70, 61, 51, 42, 32, 24, 14, 4, -4, -14, -23, -34, -43, -52, -61, -70, -79, -87, -94, -103, -111, -119, -125, -132, -138, -145, -150, -155, -160, -165, -169, -173, -175, -179, -182, -183, -184, -185, -186, -186, -185, -184, -183, -181, -179, -176, -173, -168, -164, -160, -156, -151, -144, -138, -132, -125, -118, -110, -103, -95, -86, -78, -69, -61, -52, -42, -31, -22, -14, -4, 5, 14, 23, 32, 42, 52, 61, 70, 78, 88, 97, 105, 113, 120, 128, 135, 142, 149, 155, 161, 167, 172, 176, 181, 185, 189, 191, 195, 197, 198, 200, 201, 200, 201, 201, 200, 198, 196, 194, 191, 188, 184, 180, 175, 171, 166, 160, 152, 147, 141, 133, 125, 117, 110, 102, 93, 84, 75, 67, 58, 47, 38, 30, 19, 10, 0, -8, -17, -27, -37, -46, -55, -63, -72, -83, -90, -98, -105, -114, -121, -128, -134, -141, -147, -152, -158, -163, -168, -172, -174, -178, -181, -183, -184, -186, -187, -188, -187, -187, -186, -184, -182, -180, -177, -173, -170, -165, -160, -156, -151, -145, -138, -132, -126, -118, -110, -103, -95, -87, -78, -69, -61, -52, -42, -32, -24, -15, -4, 5, 14, 23, 32, 42, 52, 61, 69, 78, 88, 96, 104, 112, 120, 128, 135, 142, 149, 154, 161, 166, 171, 175, 181, 184, 188, 191, 194, 197, 198, 199, 200, 200, 200, 199, 198, 197, 195, 192, 190, 186, 183, 178, 174, 169, 165, 158, 151, 145, 139, 131, 124, 117, 109, 100, 91, 82, 74, 66, 56, 46, 37, 28, 19, 8, -1, -10, -18, -29, -39, -48, -56, -66, -75, -84, -91, -99, -107, -116, -123, -129, -135, -142, -148, -153, -158, -163, -169, -172, -176, -179, -182, -184, -185, -187, -188, -188, -188, -187, -187, -185, -183, -180, -177, -175, -171, -167, -161, -157, -151, -146, -140, -134, -127, -119, -111, -103, -96, -88, -79, -70, -62, -53, -43, -33, -23, -15, -6, 4, 14, 22, 31, 41, 50, 61, 68, 77, 87, 95, 103, 111, 118, 127, 135, 141, 146, 153, 160, 165, 170, 175, 179, 183, 187, 190, 193, 195, 197, 198, 199, 199, 198, 198, 198, 196, 194, 191, 189, 186, 182, 178, 173, 169, 163, 157, 151, 145, 138, 131, 123, 115, 108, 100, 90, 81, 74, 65, 56, 45, 36, 28, 18, 7, -1, -10, -19, -29, -39, -49, -56, -65, -75, -83, -91, -99, -107, -115, -123, -129, -136, -143, -148, -154, -159, -164, -168, -173, -176, -179, -182, -185, -187, -188, -189, -189, -189, -189, -188, -186, -184, -182, -179, -175, -172, -167, -163, -159, -152, -146])

# Settings: lag = 30, threshold = 5, influence = 0
# lag for the smoothing, 计算平均值的间隔点数.
lag = 128
threshold = 5
# when signal: how much influence for new data? (between 0 and 1)
# 对当前节点做平滑，平滑系数是(0,1)，值越大越受当前值的影响。when 1 is normal influence, 0.5 is half。
influence = 0

# Run algo with settings from above
result = thresholding_algo(y, lag=lag, threshold=threshold, influence=influence)

# Plot result
pylab.subplot(211)
pylab.plot(np.arange(1, len(y)+1), y)

pylab.plot(np.arange(1, len(y)+1),
           result["avgFilter"], color="cyan", lw=2)

pylab.plot(np.arange(1, len(y)+1),
           result["avgFilter"] + threshold * result["stdFilter"], color="green", lw=2)

pylab.plot(np.arange(1, len(y)+1),
           result["avgFilter"] - threshold * result["stdFilter"], color="green", lw=2)

pylab.subplot(212)
pylab.step(np.arange(1, len(y)+1), result["signals"], color="red", lw=2)
pylab.ylim(-1.5, 1.5)
