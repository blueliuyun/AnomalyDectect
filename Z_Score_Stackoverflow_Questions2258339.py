# -*- coding: utf-8 -*-
"""
Created on Mon Nov 19 15:02:11 2018

Reference : https://stackoverflow.com/questions/22583391/peak-signal-detection-in-realtime-timeseries-data/43512887#43512887
# Implementation of algorithm from https://stackoverflow.com/a/22640362/6029703

@author: tianye
"""
import numpy as np
import pylab

def thresholding_algo(y, lag, threshold, influence):
    nFlag = 0x00
    signals = np.zeros(len(y)) # 返回长度为 len(y) 的数组。
    filteredY = np.array(y)
    avgFilter = [0]*len(y)
    stdFilter = [0]*len(y)
    avgFilter[lag - 1] = np.mean(y[0:lag])
    stdFilter[lag - 1] = np.std(y[0:lag]) # 计算全局标准差，默认情况下，numpy 计算的是总体标准偏差，ddof = 0
    for i in range(lag, len(y)):
        if abs(y[i] - avgFilter[i-1]) > threshold * stdFilter [i-1]:
            if y[i] > avgFilter[i-1]:                
                signals[i] = 1
                if nFlag == 0x00:
                    nFlag = i
                    print('nFlag = %d,  y[i] = %d' % (nFlag, y[i]))
            else:
                signals[i] = -1
                if nFlag == 0x00:
                    nFlag = i
                    print('nFlag = %d,  y[i] = %d' % (nFlag, y[i]))

            """
            @2018-11-20 对异常点的数值进行平滑，以便评估下下个点是否为异常点。
             因为不做平滑，由于当前是个异常点，对平均值、方差影响较大，若是下一个点仍是异常点，可能不会识别。
            """
            filteredY[i] = influence * y[i] + (1 - influence) * filteredY[i-1]
            avgFilter[i] = np.mean(filteredY[(i-lag+1):i+1])
            stdFilter[i] = np.std(filteredY[(i-lag+1):i+1])
        else:
            signals[i] = 0
            filteredY[i] = y[i]
            avgFilter[i] = np.mean(filteredY[(i-lag+1):i+1])
            stdFilter[i] = np.std(filteredY[(i-lag+1):i+1])

    return dict(signals = np.asarray(signals),
                avgFilter = np.asarray(avgFilter),
                stdFilter = np.asarray(stdFilter))
    
# Data
"""
y = np.array([1,1,1.1,1,0.9,1,1,1.1,1,0.9,1,1.1,1,1,0.9,1,1,1.1,1,1,1,1,1.1,0.9,1,1.1,1,1,0.9,
       1,1.1,1,1,1.1,1,0.8,0.9,1,1.2,0.9,1,1,1.1,1.2,1,1.5,1,3,2,5,3,2,1,1,1,0.9,1,1,3,
       2.6,4,3,3.2,2,1,1,0.8,4,4,2,2.5,1,1,1])
"""
y = np.array([0, -1, -1, -2, -2, -2, -3, -3, -4, -4, -4, -4, -5, -5, -5, -5, -6, -6, -6, -6, -6, -6, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -6, -6, -6, -6, -6, -5, -5, -5, -5, -4, -4, -4, -3, -3, -2, -2, -2, -1, -1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 4, 4, 3, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, -1, -1, -2, -2, -3, -3, -3, -4, -4, -4, -4, -5, -5, -5, -5, -6, -6, -6, -6, -6, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -6, -6, -6, -6, -6, -6, -5, -5, -5, -4, -4, -3, -3, -3, -2, -2, -1, -1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 4, 4, 4, 3, 3, 2, 2, 1, 1, 1, 0, 0, 0, 0, -1, -1, -2, -2, -2, -3, -3, -3, -4, -4, -5, -5, -5, -5, -5, -6, -6, -6, -6, -6, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -6, -6, -6, -6, -5, -5, -5, -5, -4, -4, -3, -3, -3, -2, -2, -1, -1, -1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 4, 4, 3, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, -1, -1, -2, -2, -2, -3, -3, -4, -4, -4, -4, -5, -5, -5, -5, -6, -6, -6, -6, -6, -6, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -6, -6, -6, -5, -5, -5, -4, -4, -4, -3, -3, -3, -2, -2, -1, -1, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 6, 6, 6, 5, 5, 5, 4, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, -1, -1, -2, -2, -2, -3, -3, -4, -4, -4, -5, -5, -5, -5, -5, -6, -6, -6, -6, -6, -6, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -6, -6, -6, -6, -6, -5, -5, -5, -5, -4, -4, -4, -3, -3, -2, -2, -1, -1, -1, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, -23, -102, -285, -545, -791, -981, -1125, -1198, -1142, -955, -726, -546, -438, -392, -424, -541, -684, -751, -696, -569, -446, -356, -284, -234, -225, -251, -269, -245, -188, -126, -67, -1, 62, 103, 119, 132, 164, 210, 252, 290, 334, 385, 428, 456, 478, 507, 540, 571, 596, 624, 657, 686, 705, 721, 739, 759, 773, 784, 794, 808, 818, 824, 824, 826, 828, 826, 818, 812, 804, 796, 784, 769, 753, 737, 717, 695, 670, 646, 622, 594, 564, 533, 503, 470, 435, 400, 364, 328, 290, 250, 211, 172, 132, 91, 50, 10, -30, -71, -112, -152, -192, -231, -270, -309, -347, -383, -418, -453, -487, -519, -551, -581, -609, -636, -662, -686, -709, -729, -748, -765, -780, -794, -805, -815, -822, -828, -832, -833, -832, -831, -827, -820, -812, -802, -790, -775, -760, -742, -723, -701, -679, -654, -628, -600, -571, -541, -509, -476, -442, -407, -370, -334, -295, -257, -218, -178, -138, -98, -57, -16, 24, 65, 105, 145, 185, 225, 264, 303, 340, 377, 413, 447, 480, 513, 544, 574, 603, 630, 656, 681, 703, 724, 743, 760, 776, 788, 800, 810, 818, 824, 828, 830, 830, 827, 823, 817, 809, 799, 787, 773, 757, 740, 721, 699, 676, 652, 626, 599, 570, 539, 508, 475, 441, 406, 370, 334, 296, 258, 219, 180, 140, 99, 59, 18, -22, -63, -103, -143, -183, -223, -262, -300, -338, -375, -410, -445, -479, -511, -543, -573, -601, -628, -654, -678, -701, -721, -741, -758, -774, -788, -799, -808, -816, -823, -827, -829, -829, -827, -823, -816, -808, -799, -787, -772, -757, -740, -721, -699, -677, -653, -627, -599, -570, -540, -509, -476, -442, -407, -372, -335, -297, -259, -220, -181, -141, -100, -60, -19, 20, 61, 101, 142, 181, 221, 260, 298, 335, 372, 408, 442, 476, 508, 540, 570, 599, 626, 651, 675, 698, 719, 738, 755, 771, 784, 796, 806, 814, 820, 824, 826, 826, 824, 820, 815, 807, 797, 786, 772, 757, 740, 721, 700, 678, 654, 628, 602, 573, 543, 512, 480, 446, 412, 376, 340, 302, 264, 226, 187, 147, 107, 66, 26, -13, -54, -94, -134, -175, -214, -253, -291, -328, -365, -400, -436, -469, -502, -533, -564, -592, -620, -646, -670, -693, -713, -733, -750, -766, -780, -792, -802, -811, -817, -822, -824, -824, -823, -820, -814, -807, -798, -786, -773, -758, -742, -723, -703, -681, -657, -633, -606, -578, -549, -517, -486, -453, -418, -383, -347, -310, -272, -234, -195, -155, -115, -75, -35, 5, 45, 85, 125, 165, 205, 244, 282, 319, 356, 392, 427, 461, 493, 524, 555, 584, 612, 638, 664, 687, 708, 728, 746, 762, 777, 789, 800, 809, 816, 820, 824, 824, 823, 820, 816, 808, 800, 789, 776, 762, 745, 727, 707, 685, 662, 637, 611, 583, 553, 523, 491, 458, 424, 388, 352, 315, 278, 240, 201, 161, 121, 81, 40, 0, -40, -80, -120, -160, -200, -239, -277, -315, -352, -388, -423, -457, -490, -522, -553, -581, -609, -636, -660, -683, -705, -725, -743, -759, -774, -786, -797, -806, -812, -817, -820, -820, -820, -816, -811, -804, -796, -784, -771, -756, -740, -721, -701, -679, -656, -631, -604, -576, -546, -515, -483, -450, -416, -381, -344, -307, -269, -231, -192, -152, -112, -72, -32, 8, 48, 89, 129, 168, 208, 246, 284, 322, 359, 394, 429, 463, 496, 527, 557, 586, 613, 639, 664, 686, 708, 727, 745, 761, 774, 786, 796, 804, 811, 816, 818, 818, 817, 814, 808, 801, 792, 781, 768, 753, 736, 717, 698, 676, 652, 627, 601, 573, 543, 513, 481, 448, 414, 379, 343, 306, 268, 230, 192, 152, 112, 73, 33, -7, -47, -87, -126, -166, -205, -243, -281, -318, -355, -390, -425, -459, -490, -522, -552, -580, -608, -634, -658, -681, -703, -722, -740, -756, -770, -782, -792, -801, -808, -813, -816, -816, -816, -813, -808, -800, -792, -781, -768, -754, -737, -720, -700, -679, -656, -631, -605, -578, -549, -518, -487, -454, -420, -385, -350, -313, -276, -238, -199, -160, -120, -80, -40, 0, 39, 79, 119, 158, 197, 236, 274, 311, 348, 384, 418, 452, 485, 516, 546, 575, 604, 630, 655, 678, 699, 719, 737, 754, 768, 781, 791, 800, 807, 812, 816, 816, 816, 812, 808, 801, 792, 781, 769, 755, 739, 720, 700, 679, 656, 630, 605, 577, 548, 518, 486, 453, 419, 384, 348, 312, 274, 237, 198, 159, 119, 79, 39, 0, -41, -81, -120, -160, -199, -238, -276, -313, -350, -386, -420, -454, -487, -518, -548, -577, -604, -631, -655, -678, -699, -719, -737, -752, -766, -779, -790, -798, -804, -809, -812, -813, -811, -808, -803, -797, -787, -776, -763, -748, -732, -713, -693, -671, -649, -624, -597, -570, -540, -509, -478, -445, -411, -376, -340, -304, -266, -228, -189, -150, -111, -71, -31, 8, 48, 88, 127, 166, 205, 244, 281, 318, 355, 390, 424, 458, 490, 521, 551, 579, 606, 632, 656, 678, 700, 719, 737, 752, 765, 778, 788, 796, 802, 808, 810, 810, 809, 805, 800, 793, 784, 773, 761, 746, 729, 711, 691, 670, 646, 621, 596, 568, 539, 509, 477, 444, 410, 376, 340, 304, 266, 229, 190, 151, 112, 73, 33, -6, -46, -85, -124, -164, -202, -241, -278, -315, -351, -386, -421, -454, -486, -517, -547, -576, -603, -628, -653, -675, -697, -716, -733, -749, -763, -775, -786, -794, -800, -806, -808, -809, -808, -805, -800, -794, -784, -774, -761, -747, -730, -713, -693, -672, -649, -625, -599, -571, -543, -513, -481, -449, -415, -380, -345, -309, -272, -234, -195, -157, -118, -78, -38, 0, 40, 80, 119, 158, 197, 235, 273, 310, 346, 382, 416, 449, 481, 512, 542, 571, 598, 624, 649, 672, 693, 713, 731, 746, 761, 773, 784, 792, 799, 804, 807, 808, 806, 804, 799, 792, 784, 773, 760, 746, 729, 712, 692, 671, 648, 624, 598, 570, 541, 511, 480, 447, 413, 379, 343, 307, 270, 233, 195, 156, 117, 77, 37, -2, -42, -81, -120, -159, -198, -236, -274, -311, -347, -382, -417, -450, -482, -513, -543, -572, -599, -624, -649, -671, -693, -712, -729, -745, -760, -772, -782, -791, -798, -802, -805, -806, -805, -802, -797, -790, -782, -771, -758, -744, -727, -709, -689, -668, -646, -621, -596, -568, -539, -509, -478])

# Settings: lag = 30, threshold = 5, influence = 0
# lag for the smoothing, 计算平均值的间隔点数.
lag = 128
threshold = 5
# when signal: how much influence for new data? (between 0 and 1)
# 对当前节点做平滑，平滑系数是(0,1)，值越大越受当前值的影响。when 1 is normal influence, 0.5 is half。
influence = 0

# Run algo with settings from above
result = thresholding_algo(y, lag=lag, threshold=threshold, influence=influence)

# Plot result
pylab.subplot(211)
pylab.plot(np.arange(1, len(y)+1), y)

pylab.plot(np.arange(1, len(y)+1),
           result["avgFilter"], color="cyan", lw=2)

pylab.plot(np.arange(1, len(y)+1),
           result["avgFilter"] + threshold * result["stdFilter"], color="green", lw=2)

pylab.plot(np.arange(1, len(y)+1),
           result["avgFilter"] - threshold * result["stdFilter"], color="green", lw=2)

pylab.subplot(212)
pylab.step(np.arange(1, len(y)+1), result["signals"], color="red", lw=2)
pylab.ylim(-1.5, 1.5)
